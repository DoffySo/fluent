import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { ThemeProvider } from '@/app/components/ThemeProvider';
import { Providers } from "@/app/providers";
import { useUserStore } from "@/app/stores/user";
import { getSession } from "@/app/lib/session";
import { UserProvider } from "@/app/context/UserProvider";

const geistSans = localFont({
    src: "./fonts/GeistVF.woff",
    variable: "--font-geist-sans",
    weight: "100 900",
});
const geistMono = localFont({
    src: "./fonts/GeistMonoVF.woff",
    variable: "--font-geist-mono",
    weight: "100 900",
});

export const metadata: Metadata = {
    title: "Fluent - An Encrypted Web-Messenger",
    // description: "Generated by create next app",
};

export default async function RootLayout({
   children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    const session = await getSession();
    let initialUser = null;

    if (session?.user_id) {
        const baseUrl =
            process.env.NODE_ENV === "development"
                ? process.env.NEXT_DEV_BASE_URL
                : process.env.NEXT_BASE_URL;
        const res = await fetch(`${baseUrl}/api/user/${session.user_id}`, {
            cache: "no-store",
        });
        if (res.ok) {
            const { user } = await res.json();
            initialUser = user;
        }
    }


    return (
        <html lang="en" suppressHydrationWarning>
        <body
            className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
        <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
        >
            <UserProvider initialUser={initialUser}>
                {children}
            </UserProvider>
        </ThemeProvider>
        </body>
        </html>
    );
}
