generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_URL")
  directUrl = env("PRISMA_DIRECT_URL")
}

model User {
  id                       String     @id @default(uuid())
  // User Defaults
  email                    String     @unique
  password                 String
  firstName                String
  lastName                 String?
  username                 String?     @unique
  phoneNumber              String?
  profilePhoto             String?
  status                   UserStatus @default(userStatusEmpty) // Current online status of the user
  // User Style
  accentColorId            Int?       @default(-1) // -1 - None | Identifier of the accent color for name, and backgrounds of profile photo, reply header, and link preview
  backgroundEmojiId        Int?       @default(0) // 0 - None | Identifier of a custom emoji to be shown on the reply header and link preview background
  profileAccent_colorId    Int?       @default(-1) // -1 - None | Identifier of a custom emoji to be shown on the reply header and link preview background
  profileBackgroundEmojiId Int?       @default(0) // 0 - None | Identifier of a custom emoji to be shown on the background of the user's profile
  emojiStatus              Int?       @default(-1) // 0 - None | Emoji status to be shown instead of the default Fluent Premium badge
  // User other
  isPremium                Boolean    @default(false)
  premiumTill              DateTime   @default(now())
  isSupport                Boolean    @default(false)
  restictedTo              DateTime?
  restictedReason          String? // If non-empty, it contains a human-readable description of the reason why access to this user must be restricted
  // Other
  lastOnline               DateTime   @default(now())
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  // Relations
  UserPrivacy          UserPrivacy[] // Privacy settings (who sees what)
  UserBlacklist        UserBlocklist[]        @relation("UserBlocklist_User") // List of blocked users
  UserProfilePhoto     UserProfilePhoto[] // History of profile photos
  UserPrivacyException UserPrivacyException[] // Privacy exceptions (whitelist/blacklist)
  UserBlocklist        UserBlocklist[]        @relation("UserBlocklist_BlockedUser")
  UserAutoDelete       UserAutoDelete[]
  ChatUserPermissions  ChatUserPermissions[]
  UserChat             UserChat[]
  Chat                 Chat?                  @relation("ChatParticipants", fields: [chatId], references: [id])
  chatId               String?
  Message              Message[]
  Session Session[]
}

model UserProfilePhoto {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  photoUrl   String
  is_current Boolean  @default(false) // This field shows whether the photo is the current one
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserPrivacy {
  id                   String                 @id @default(uuid())
  user                 User                   @relation(fields: [userId], references: [id])
  userId               String
  type                 PrivacyType // What kind of data privacy is applied
  visibility           PrivacyLevel           @default(EVERYONE) // Who can see this information
  UserPrivacyException UserPrivacyException[] // Exceptions for this privacy setting
}

model UserPrivacyException {
  id        String        @id @default(uuid())
  privacy   UserPrivacy   @relation(fields: [privacyId], references: [id], onDelete: Cascade)
  privacyId String
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  type      ExceptionType // Exception type (WHITELIST/BLACKLIST)
}

model UserBlocklist {
  id            String @id @default(uuid())
  userId        String
  user          User   @relation("UserBlocklist_User", fields: [userId], references: [id])
  blockedUserId String
  blocked       User   @relation("UserBlocklist_BlockedUser", fields: [blockedUserId], references: [id])

  @@unique([userId, blockedUserId])
}

// Auto Delete Messages
model UserAutoDelete {
  id         String            @id @default(uuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  deleteType MessageAutoDelete @default(DONT_DELETE)
  // If deleteType = CUSTOM
  deleteTime Int?              @default(1)
  timeUnit   AutoDeleteUnits   @default(DAY)
}

model UserChat {
  id     String    @id @default(uuid())
  chat   Chat      @relation(fields: [chatId], references: [id])
  chatId String
  user   User      @relation(fields: [userId], references: [id])
  userId String
  role   ChatRoles @default(MEMBER)
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
}


// --- Chats
model Chat {
  id                    String                @id @default(uuid())
  title                 String
  type                  ChatTypes
  photo                 String?
  ChatPermissions       ChatPermissions[]
  chatUserPermissionsId String?
  ChatUserPermissions   ChatUserPermissions[] @relation("ChatUserPermissions")
  UserChat              UserChat[]
  participants          User[]                @relation("ChatParticipants")
  Message               Message[]
}

model Message {
  id               String     @id @default(uuid())
  chat             Chat       @relation(fields: [chatId], references: [id])
  chatId           String
  sender           User       @relation(fields: [userId], references: [id])
  userId           String
  text             String?
  mediaUrl         String?
  mediaType        MediaTypes
  forwardedFrom    Message?   @relation("ForwardedMessages", fields: [forwardedFromId], references: [id])
  forwardedFromId  String?
  forwardedTo      Message[]  @relation("ForwardedMessages")
  isForwarded      Boolean    @default(false)
  originalSenderId String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model ChatPermissions {
  id                   String  @id @default(uuid())
  Chat                 Chat    @relation(fields: [chatId], references: [id])
  chatId               String
  canSendBasicMessages Boolean @default(true)
  canSendAudios        Boolean @default(true)
  canSendDocuments     Boolean @default(true)
  canSendPhotos        Boolean @default(true)
  canSendVideos        Boolean @default(true)
  canSendVideoNotes    Boolean @default(true)
  canSendAudioNotes    Boolean @default(true)
  canSendPolls         Boolean @default(true)
  canSendOtherMessaged Boolean @default(true)
  canChangeInfo        Boolean @default(true)
  canInviteUsers       Boolean @default(true)
  canPinMessages       Boolean @default(true)

  @@unique([chatId])
}

model ChatUserPermissions {
  id                   String  @id @default(uuid())
  Chat                 Chat    @relation("ChatUserPermissions", fields: [chatId], references: [id])
  chatId               String
  user                 User    @relation(fields: [userId], references: [id])
  canSendBasicMessages Boolean @default(true)
  canSendAudios        Boolean @default(true)
  canSendDocuments     Boolean @default(true)
  canSendPhotos        Boolean @default(true)
  canSendVideos        Boolean @default(true)
  canSendVideoNotes    Boolean @default(true)
  canSendAudioNotes    Boolean @default(true)
  canSendPolls         Boolean @default(true)
  canSendOtherMessaged Boolean @default(true)
  canChangeInfo        Boolean @default(true)
  canInviteUsers       Boolean @default(true)
  canPinMessages       Boolean @default(true)
  userId               String

  @@unique([chatId, userId])
}

// Enums
enum PrivacyLevel {
  EVERYONE // Everyone can see
  NO_ONE // No one can see
  CONTACTS // Only contacts can see (not yet implemented)
}

enum ExceptionType {
  WHITELIST // Exception for NO_ONE (allow some users)
  BLACKLIST // Exception for EVERYONE (hide from some users)
}

enum PrivacyType {
  PHONE_NUMBER
  LAST_SEEN
  PROFILE_PHOTO
  ABOUT
  BIRTH_DATE
  FORWARDING_MESSAGES
  CALLS
  VOICE_MESSAGES // And Video Messages
  MESSAGES
  INVITES
}

enum MessageAutoDelete {
  DONT_DELETE
  ONE_DAY
  ONE_WEEK
  ONE_MONTH
  CUSTOM
}

enum AutoDeleteUnits {
  DAY
  WEEK
  MONTH
  YEAR
}

enum UserStatus {
  userStatusEmpty
  userStatusLongTime
  userStatusLastMonth
  userStatusLastWeek
  userStatusOffline
  userStatusOnline
  userStatusRecently
}

enum ChatTypes {
  PRIVATE
  GROUP
  CHANNEL
}

enum ChatRoles {
  OWNER
  ADMIN
  MEMBER
}

enum MediaTypes {
  TEXT
  AUDIO
  VIDEO
  DOCUMENT
  IMAGE
}
